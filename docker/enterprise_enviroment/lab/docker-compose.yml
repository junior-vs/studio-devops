version: "3.9"

networks:
  dev_network:
    driver: bridge
    external: true

volumes:
  shared: 
    driver: local
  schemas: {}

services:
  postgres:
    container_name: postgres-1
    image: postgres:14
    hostname: hostdb2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - "${SHARED_VOL}/postgresql/postgresdata/postgres:/data/postgres"
      - "${SHARED_VOL}/postgresql/var/lib/postgresql/data:/var/lib/postgresql/data"
      - "${SHARED_VOL}/postgresql/var/lib/postgresql/data/pgdata:/var/lib/postgresql/data/pgdata"
      - "./scritps:/docker-entrypoint-initdb.d"
      - "./schemas:/schemas"
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ${NETWORK}
  pgadmin:
    container_name: pgadmin-1
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - ${NETWORK}
    depends_on:
      - postgres
  sonarqube:
    image: bitnami/sonarqube
    ports:
      - '${SONAR_PORT}:9000'
    volumes:
      - "${SHARED_VOL}/sonarqube/sonarqube_data:/bitnami" 
      - "${SHARED_VOL}/sonarqube/logs:/opt/bitnami/sonarqube/logs" 
    depends_on:
      - postgres
    networks:
      - ${NETWORK}
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      ALLOW_EMPTY_PASSWORD: yes
      SONARQUBE_USERNAME: ${SONARQUBE_USERNAME}
      SONARQUBE_PASSWORD: ${SONARQUBE_PASSWORD}
      SONARQUBE_DATABASE_HOST: ${POSTGRES_HOST}
      SONARQUBE_DATABASE_PORT_NUMBER: ${POSTGRES_PORT}      
      SONARQUBE_DATABASE_NAME: ${SONARQUBE_DATABASE_NAME}
      SONARQUBE_DATABASE_USER: ${SONARQUBE_DATABASE_USER}
      SONARQUBE_DATABASE_PASSWORD: ${SONARQUBE_DATABASE_PASSWORD}
    profiles:
      - qa
  keycloak:
    image: bitnami/keycloak:19.0.3
    container_name: keycloak-1
    hostname: keycloak
    environment:
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_ADMIN_USER: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_MANAGEMENT_USER: ${KEYCLOAK_MANAGEMENT_USER}
      KEYCLOAK_MANAGEMENT_PASSWORD: ${KEYCLOAK_MANAGEMENT_PASSWORD}
      KEYCLOAK_CREATE_ADMIN_USER: ${KEYCLOAK_CREATE_ADMIN_USER}
      KEYCLOAK_DATABASE_HOST: ${POSTGRES_HOST}
      KEYCLOAK_DATABASE_NAME: ${KEYCLOAK_DATABASE_NAME}
      KEYCLOAK_DATABASE_USER: ${KEYCLOAK_DATABASE_USER}
      KEYCLOAK_DATABASE_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
    depends_on:
      - postgres 
    networks:
      - ${NETWORK}
    ports:
      - "${KEYCLOAK_HTTP_PORT}:8080"
      - "${KEYCLOAK_HTTPS_PORT}:8443"
    profiles:
      - security
  rabbitmq:
    image:  rabbitmq:3.10.7-management
    hostname: rabbit
    container_name: rabbitmq-1
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${RABBIMQ_PORT_AMQP}:5672    #amqp
      - ${RABBIMQ_PORT_HTTP}:15672  #http
      - ${RABBIMQ_PORT_PROMETEUS}:15692  #prometheus
    depends_on:
      - postgres 
    networks:
      - ${NETWORK}
    profiles:
      - backend
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    hostname: zookeeper
    container_name: zookeeper-1
    ports:
      - ${ZOOKEEPER_PORT}:2181
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOO_CLIENT_USER: ${ZOO_CLIENT_USER}
      ZOO_CLIENT_PASSWORD: ${ZOO_CLIENT_PASSWORD}
      ZOO_SERVER_USERS: ${ZOO_SERVER_USERS}
      ZOO_SERVER_PASSWORDS: ${ZOO_SERVER_PASSWORDS}
    networks:
      - ${NETWORK}
    profiles:
      - backend
  kafka:
    image: 'bitnami/kafka:latest' 
    hostname: kafka
    container_name: kafka-1
    ports:
      - ${KAFKA_PORT}:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_ZOOKEEPER_USER: ${ZOO_CLIENT_USER}
      KAFKA_ZOOKEEPER_PASSWORD: ${ZOO_CLIENT_PASSWORD}
      KAFKA_CLIENT_USERS: ${ZOO_SERVER_USERS}
      KAFKA_CLIENT_PASSWORDS: ${ZOO_SERVER_PASSWORDS}
    depends_on:
      - zookeeper
    networks:
      - ${NETWORK}
    profiles:
      - backend  
  grafana:
    image: grafana/grafana
    container_name: grafana-1
    hostname: grafana
    environment:
      -  GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - ${GRAFANA_PORT}:3000
    networks:
      - ${NETWORK}
    profiles:
      - monitoring
  prometheus:
    image: bitnami/prometheus:latest
    container_name: prometheus-1
    hostname: prometheus    
    ports:
      - ${PROMETHEUS_PORT}:9090
    networks:
      - ${NETWORK}
    volumes:
      - ${SHARED_VOL}/prometheus:/opt/bitnami/prometheus/data
    profiles:
      - monitoring
  mongo:
    image: mongo
    container_name: mongodb-1
    hostname: mongo
    ports:
      - ${MONGO_PORT}:27017
    #restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - ${NETWORK}    
    profiles:
      - nosql
  mongo-express:
    image: mongo-express
    container_name: mongo-express-1 
    #hostname: mongoexpress
    #restart: always
    ports:
      - ${MONGO_EXPRESS_PORTA}:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${ME_CONFIG_BASICAUTH_PASSWORD}@mongo:${MONGO_PORT}/
      #ME_CONFIG_MONGODB_URL: mongodb://localhost:${MONGO_PORT}/
      ME_CONFIG_MONGODB_PORT: ${MONGO_PORT}
    depends_on:
      - mongo
    networks:
      - ${NETWORK}    
    profiles:
      - nosql
  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
     - ${REDIS_PORT}:6379
    volumes:
      - ${SHARED_VOL}/redis/redis-data:/data
      - ${SHARED_VOL}/redis/redis-conf:/usr/local/etc/redis/redis.conf
    networks:
      - ${NETWORK}    
    profiles:
      - nosql
  activvmq-artemis:
    image: quay.io/artemiscloud/activemq-artemis-broker
    ports:
      - 8161:8161
      - 61616:61616
      - 5672:5672
    environment:
      AMQ_USER: admin
      AMQ_PASSWORD: admin
    networks:
      - ${NETWORK}
    profiles:
      - mq